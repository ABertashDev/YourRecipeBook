// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(RecipeBookDbContext))]
    [Migration("20230820220239_ClearData")]
    partial class ClearData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.CookingStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Number");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Photo");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("CookingSteps", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("Ingredients", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Recipes", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.RecipeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RecipeCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Snacks",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Salads",
                            SortOrder = 20
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "First dishes",
                            SortOrder = 30
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Second dishes",
                            SortOrder = 40
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Meat dishes",
                            SortOrder = 50
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Fish dishes",
                            SortOrder = 60
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Baking / desserts",
                            SortOrder = 70
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Beverages",
                            SortOrder = 80
                        });
                });

            modelBuilder.Entity("DAL.Entities.RecipeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("Quantity");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UnitId");

                    b.ToTable("RecipeDetails", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.ToTable("Units", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "ml",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Milliliter"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "l",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Liter"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "tsp.",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Teaspoon"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "tbsp.",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Tablespoon"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "c",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Cup"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "mg",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Milligram"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "g",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Gram"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "kg",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Kilogram"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "°C",
                            CreatedAt = new DateTime(2023, 8, 21, 1, 2, 38, 332, DateTimeKind.Local).AddTicks(7156),
                            IsDeleted = false,
                            Name = "Degree celsius"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CookingStep", b =>
                {
                    b.HasOne("DAL.Entities.Recipe", "Recipe")
                        .WithMany("CookingSteps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("DAL.Entities.Ingredient", b =>
                {
                    b.HasOne("DAL.Entities.Unit", "Unit")
                        .WithMany("Ingredients")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DAL.Entities.Recipe", b =>
                {
                    b.HasOne("DAL.Entities.RecipeCategory", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.RecipeDetail", b =>
                {
                    b.HasOne("DAL.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Entities.Recipe", "Recipe")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Unit", "Unit")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DAL.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("DAL.Entities.Recipe", b =>
                {
                    b.Navigation("CookingSteps");

                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("DAL.Entities.RecipeCategory", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("DAL.Entities.Unit", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("RecipeDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
